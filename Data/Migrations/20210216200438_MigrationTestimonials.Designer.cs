// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210216200438_MigrationTestimonials")]
    partial class MigrationTestimonials
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.ExpertEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .HasColumnType("VARCHAR(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 2, 16, 20, 4, 37, 630, DateTimeKind.Utc).AddTicks(8820));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Location")
                        .HasColumnType("VARCHAR(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .HasColumnType("VARCHAR(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(45)")
                        .HasMaxLength(45)
                        .HasDefaultValue("User");

                    b.Property<double>("Stars")
                        .HasColumnType("DOUBLE(4,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Expert");
                });

            modelBuilder.Entity("Domain.Entities.PhotoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 2, 16, 20, 4, 37, 638, DateTimeKind.Utc).AddTicks(1597));

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("VARCHAR(225)")
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Domain.Entities.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 2, 16, 20, 4, 37, 633, DateTimeKind.Utc).AddTicks(3786));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasMaxLength(200);

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<double>("Price")
                        .HasColumnType("DOUBLE(10,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ExpertId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Domain.Entities.TestimonialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 2, 16, 20, 4, 37, 640, DateTimeKind.Utc).AddTicks(4425));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Stars")
                        .HasColumnType("DOUBLE(4,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Testimonial");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .HasColumnType("VARCHAR(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 2, 16, 20, 4, 37, 628, DateTimeKind.Utc).AddTicks(6756));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .HasColumnType("VARCHAR(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(45)")
                        .HasMaxLength(45)
                        .HasDefaultValue("User");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a49f0424-954c-4cbf-ab09-764efb711e7e"),
                            Avatar = "C:/Users/adm/Documents/GitHub/EasyIt/EasyItMobileApp/src/avatars/admAvatar.png",
                            CreateAt = new DateTime(2021, 2, 16, 20, 4, 37, 642, DateTimeKind.Utc).AddTicks(2139),
                            Email = "adm@root.com",
                            Name = "Administrador",
                            Password = "mudar123",
                            Role = "Administrator"
                        });
                });

            modelBuilder.Entity("Domain.Entities.PhotoEntity", b =>
                {
                    b.HasOne("Domain.Entities.ExpertEntity", "Expert")
                        .WithMany("Photos")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ServiceEntity", b =>
                {
                    b.HasOne("Domain.Entities.ExpertEntity", "Expert")
                        .WithMany("Services")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.TestimonialEntity", b =>
                {
                    b.HasOne("Domain.Entities.ExpertEntity", "Expert")
                        .WithMany("Testimonials")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Testimonials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
