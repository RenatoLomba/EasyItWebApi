// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210306125350_FavoritesMigration")]
    partial class FavoritesMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.AppointmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 3, 6, 12, 53, 50, 522, DateTimeKind.Utc).AddTicks(2549));

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.AvailableDateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 3, 6, 12, 53, 50, 524, DateTimeKind.Utc).AddTicks(6622));

                    b.Property<int>("Day")
                        .HasColumnType("INT");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Month")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AvailableDate");
                });

            modelBuilder.Entity("Domain.Entities.AvailableHourEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AvailableDateId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 3, 6, 12, 53, 50, 526, DateTimeKind.Utc).AddTicks(9270));

                    b.Property<int>("Hour")
                        .HasColumnType("INT");

                    b.Property<int>("Minutes")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("AvailableDateId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AvailableHour");
                });

            modelBuilder.Entity("Domain.Entities.ExpertEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .HasColumnType("VARCHAR(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 3, 6, 12, 53, 50, 511, DateTimeKind.Utc).AddTicks(371));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Location")
                        .HasColumnType("VARCHAR(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .HasColumnType("VARCHAR(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(45)")
                        .HasMaxLength(45)
                        .HasDefaultValue("User");

                    b.Property<double>("Stars")
                        .HasColumnType("DOUBLE(4,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Expert");
                });

            modelBuilder.Entity("Domain.Entities.FavoritesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 3, 6, 12, 53, 50, 528, DateTimeKind.Utc).AddTicks(9088));

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Domain.Entities.PhotoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 3, 6, 12, 53, 50, 517, DateTimeKind.Utc).AddTicks(2295));

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("VARCHAR(225)")
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Domain.Entities.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 3, 6, 12, 53, 50, 513, DateTimeKind.Utc).AddTicks(712));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasMaxLength(200);

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<double>("Price")
                        .HasColumnType("DOUBLE(10,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ExpertId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Domain.Entities.TestimonialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 3, 6, 12, 53, 50, 519, DateTimeKind.Utc).AddTicks(1875));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Stars")
                        .HasColumnType("DOUBLE(4,2)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Testimonial");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Avatar")
                        .HasColumnType("VARCHAR(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValue(new DateTime(2021, 3, 6, 12, 53, 50, 509, DateTimeKind.Utc).AddTicks(854));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .HasColumnType("VARCHAR(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(45)")
                        .HasMaxLength(45)
                        .HasDefaultValue("User");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("28fb11be-e9ad-48e4-b05c-09a10b297cec"),
                            Avatar = "C:/Users/adm/Documents/GitHub/EasyIt/EasyItMobileApp/src/avatars/admAvatar.png",
                            CreateAt = new DateTime(2021, 3, 6, 12, 53, 50, 530, DateTimeKind.Utc).AddTicks(4909),
                            Email = "adm@root.com",
                            Name = "Administrador",
                            Password = "mudar123",
                            Role = "Administrator"
                        });
                });

            modelBuilder.Entity("Domain.Entities.AppointmentEntity", b =>
                {
                    b.HasOne("Domain.Entities.ExpertEntity", "Expert")
                        .WithMany("Appointments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ServiceEntity", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AvailableDateEntity", b =>
                {
                    b.HasOne("Domain.Entities.ExpertEntity", "Expert")
                        .WithMany("AvailableDates")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AvailableHourEntity", b =>
                {
                    b.HasOne("Domain.Entities.AvailableDateEntity", "AvailableDate")
                        .WithMany("AvailableHours")
                        .HasForeignKey("AvailableDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.FavoritesEntity", b =>
                {
                    b.HasOne("Domain.Entities.ExpertEntity", "Expert")
                        .WithMany("Favorites")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.PhotoEntity", b =>
                {
                    b.HasOne("Domain.Entities.ExpertEntity", "Expert")
                        .WithMany("Photos")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ServiceEntity", b =>
                {
                    b.HasOne("Domain.Entities.ExpertEntity", "Expert")
                        .WithMany("Services")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.TestimonialEntity", b =>
                {
                    b.HasOne("Domain.Entities.ExpertEntity", "Expert")
                        .WithMany("Testimonials")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Testimonials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
